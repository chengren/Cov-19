install.packages(c("bsplus", "plotly", "shinyBS"))
setwd("/Users/chengren/Documents/GitHub/bimi_msi/CENSUS")
#setwd("~/ShinyApps/bimi_msi/COVID")
source("./global.R")
populationCharacteristicsChoiceList = list(
"COVID-19 Cases, Count" = "covid_cases",
"COVID-19 Deaths, Count"= "covid_deaths",
"Foreign born population, Percent" = "p_fborn",
"Noncitizen population, Percent" = "p_noncit",
"Foreign born, entered since 2010, Percent" = "p_recent",
"Foreign born population in poverty, Percent" = "p_fb_pov",
"Foreign born, no health insurance, Percent" = "p_fb_nohi",
"Noncitizen, no health insurance, Percent" = "p_fb_noncit_nohi",
"Limited English proficient in Spanish households, Percent" = "p_lim_eng_spanish" #,
# "Limited English proficient in Chinese households, Percent" = "p_lim_eng_chinese",
# "Limited English proficient in Tagalog households, Percent" = "p_lim_eng_tagalog",
# "Limited English proficient in Korean households, Percent" = "p_lim_eng_korean",
# "Limited English proficient in Vietnamese households, Percent" = "p_lim_eng_vietnamese"
)
header <- dashboardHeaderPlus(
title = "Health Clinics, Hospitals, and COVID-19(Beta)", titleWidth = 450,
enable_rightsidebar = T,
rightSidebarIcon = "info-circle" #"desktop"
)
shiny::runApp('~/Documents/GitHub/bimi_msi/COVID')
runApp('~/Documents/GitHub/bimi_msi/COVID')
setwd("~/Users/chengren/Documents/GitHub/bimi_msi/COVID")
setwd("/Users/chengren/Documents/GitHub/bimi_msi/COVID")
getwd()
#setwd("~/ShinyApps/bimi_msi/COVID")
source("./global.R")
populationCharacteristicsChoiceList = list(
"COVID-19 Cases, Count" = "covid_cases",
"COVID-19 Deaths, Count"= "covid_deaths",
"Foreign born population, Percent" = "p_fborn",
"Noncitizen population, Percent" = "p_noncit",
"Foreign born, entered since 2010, Percent" = "p_recent",
"Foreign born population in poverty, Percent" = "p_fb_pov",
"Foreign born, no health insurance, Percent" = "p_fb_nohi",
"Noncitizen, no health insurance, Percent" = "p_fb_noncit_nohi",
"Limited English proficient in Spanish households, Percent" = "p_lim_eng_spanish" #,
# "Limited English proficient in Chinese households, Percent" = "p_lim_eng_chinese",
# "Limited English proficient in Tagalog households, Percent" = "p_lim_eng_tagalog",
# "Limited English proficient in Korean households, Percent" = "p_lim_eng_korean",
# "Limited English proficient in Vietnamese households, Percent" = "p_lim_eng_vietnamese"
)
header <- dashboardHeaderPlus(
title = "Health Clinics, Hospitals, and COVID-19(Beta)", titleWidth = 450,
enable_rightsidebar = T,
rightSidebarIcon = "info-circle" #"desktop"
)
body <- dashboardBody(
# CSS to remove grey padding around map and make it fill the available space
tags$style(type = "text/css", "
.content {padding: 0px;}
.shiny-spinner-output-container {height: calc(100vh - 50px)}
"),
# Some CSS styling options for sliders (if any)
tags$style(type = "text/css", "
.irs-grid-text {font-size: 13px; color: grey;}
span.irs-single {font-size: 14px;}
span.irs-min {font-size: 14px;}
span.irs-max {font-size: 14px;}
"),
# Google Analytics
tags$header(HTML("
<script async src='https://www.googletagmanager.com/gtag/js?id=UA-168323445-1'></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-168323445-1');
</script>")),
fluidRow(
body <- dashboardBody(
# CSS to remove grey padding around map and make it fill the available space
tags$style(type = "text/css", "
.content {padding: 0px;}
.shiny-spinner-output-container {height: calc(100vh - 50px)}
"),
# Some CSS styling options for sliders (if any)
tags$style(type = "text/css", "
.irs-grid-text {font-size: 13px; color: grey;}
span.irs-single {font-size: 14px;}
span.irs-min {font-size: 14px;}
span.irs-max {font-size: 14px;}
"),
# Google Analytics
tags$header(HTML("
<script async src='https://www.googletagmanager.com/gtag/js?id=UA-168323445-1'></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-168323445-1');
</script>")),
fluidRow(
body <- dashboardBody(
# CSS to remove grey padding around map and make it fill the available space
tags$style(type = "text/css", "
.content {padding: 0px;}
.shiny-spinner-output-container {height: calc(100vh - 50px)}
"),
# Some CSS styling options for sliders (if any)
tags$style(type = "text/css", "
.irs-grid-text {font-size: 13px; color: grey;}
span.irs-single {font-size: 14px;}
span.irs-min {font-size: 14px;}
span.irs-max {font-size: 14px;}
"),
# Google Analytics
tags$header(HTML("
<script async src='https://www.googletagmanager.com/gtag/js?id=UA-168323445-1'></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-168323445-1');
</script>")),
fluidRow(
runApp()
install.packages("stars")
install.packages("stars")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
covid_counties$county[covid_counties$state=="Alaska"]
table(covid_counties$county[covid_counties$state=="Alaska"])
county_data$NAME[county_data$state=="Alaska"]
View(county_data)
county_data$NAME[county_data$state=="California"]
table(covid_counties$county[covid_counties$state=="California"])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
county_data$NAME[1]
st_centroid(county_data %>% filter(NAME=="Autauga County, Alabama")) %>% unname
st_centroid(county_data %>% filter(NAME=="Autauga County, Alabama"))
st_centroid(county_data %>% filter(NAME=="Autauga County, Alabama"))%>%unmae
st_centroid(county_data %>% filter(NAME=="Autauga County, Alabama"))%>%unname
county_data %>% filter(NAME=="Autauga County, Alabama")
st_centroid(county_data %>% filter(NAME=="Autauga County, Alabama"))%>%geometry
st_centroid(county_data %>% filter(NAME=="Autauga County, Alabama")%>%select(geometry))
st_centroid(county_data %>% filter(NAME=="Autauga County, Alabama")%>%select(geometry))%>%unname()
st_centroid(county_data %>% filter(NAME=="Autauga County, Alabama")%>%select(geometry))%>%unname
st_centroid(county_data %>% filter(NAME=="Autauga County, Alabama")%>%select(geometry))
runApp()
runApp()
st_centroid(county_data %>% filter(NAME== input$searchcounty))
st_centroid(county_data %>% filter(NAME=="Autauga County, Alabama")%>%select(geometry))
st_centroid(county_data %>% filter(NAME=="Autauga County, Alabama")%>%select(geometry))[1]
test <- st_centroid(county_data %>% filter(NAME=="Autauga County, Alabama")%>%select(geometry))
test$geometry
data.frame(test)
runApp()
test <- st_centroid(county_data %>% filter(NAME=="Autauga County, Alabama")%>%select(geometry))
test
data.frame(test)
do.call(rbind, st_geometry(test))
do.call(rbind, st_geometry(test))[1]
runApp()
runApp()
runApp()
st_bbox(county_data %>% filter(NAME== "Aleutians West Census Area, Alaska")) %>% unname
runApp()
st_bbox(county_data %>% filter(NAME== "Aleutians West Census Area, Alaska")) %>% unname
coords_ct <- st_bbox(county_data %>% filter(NAME== "Aleutians West Census Area, Alaska")) %>% unname
coords_ct [3]
cor_3 = coords_ct[3]
cor_3 = 0 - cor_3
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
View(health_clinics_national_load)
library(dplyr)
library(tidyr)
library(sf)
library(readxl)
library(tools)
setwd("/Users/chengren/Documents/GitHub/Cov-19")
# Source code to jitter any duplicate coords (locations)
source("0_geoR_jitter.R")
setwd("/Users/chengren/Documents/GitHub/Cov-19/Data_input")
df <- read.csv('SITE_HCC_FCT_DET.csv')
library(dplyr)
library(tidyr)
library(sf)
library(readxl)
library(tools)
setwd("/Users/chengren/Documents/GitHub/Cov-19")
# Source code to jitter any duplicate coords (locations)
source("0_geoR_jitter.R")
setwd("/Users/chengren/Documents/GitHub/Cov-19/Data_input")
df <- read.csv('SITE_HCC_FCT_DET.csv')
# only for migrant
#df_mg <- df%>%filter(Migrant.Health.Centers.HRSA.Grant.Subprogram.Indicator == "Y")
health_clinics <- df
health_clinics$ID <- 1:nrow(health_clinics)
health_clinics$Site.Name <- toTitleCase(tolower(as.character(health_clinics$Site.Name)))
health_clinics$Site.Name <- gsub('Gvhc|Ghvc', 'GVHC', health_clinics$Site.Name)
health_clinics$Site.Name <- gsub('Csvs', 'CSVS', health_clinics$Site.Name)
health_clinics$Site.Name <- gsub('Chcrr', 'CHCRR', health_clinics$Site.Name)
colnames(health_clinics) <- gsub("\\.\\.\\.\\.|\\.\\.", ".", colnames(health_clinics))
health_clinics[c("Geocoding.Artifact.Address.Primary.X.Coordinate","Geocoding.Artifact.Address.Primary.Y.Coordinate")] <- jitterDupCoords(health_clinics[c("Geocoding.Artifact.Address.Primary.X.Coordinate",
"Geocoding.Artifact.Address.Primary.Y.Coordinate")],
min=0.00001, max=0.00009)
health_clinics$full_address <- paste0(health_clinics$Site.Address, ", ",
health_clinics$Site.City, ", ",
health_clinics$Site.State.Abbreviation, " ",
health_clinics$Site.Postal.Code)
###################################
# Reformat to create website URL
####################################
health_clinics$website <- health_clinics$Site.Web.Address
health_clinics$website <- gsub('None|NA|N/A','',health_clinics$website)
health_clinics$website <- ifelse(substring(health_clinics$website, 1, 4) == "http"|
health_clinics$website=="",
health_clinics$website, paste0("http://", health_clinics$website))
health_clinics$website <- tolower(health_clinics$website)
health_clinics$website[grep("\\bGVHC",health_clinics$Site.Name)]<- "http://www.gvhc.org"
health_clinics$website[grep("\\bnot apply|\\bnot applicable",health_clinics$website)]<- ""
# Format Zip Codes
health_clinics$zipcode <- substr(health_clinics$Site.Postal.Code, 1, 5)
#get county code
table(health_clinics$County.or.County.Equivalent.Federal.Information.Processing.Standard.Code)
health_keep_cols <- c(
"ID",                      # need a unique id
"Site.Name",
"full_address",
"Site.Telephone.Number",
"Federally.Qualified.Health.Center.FQHC.Look.Alike.Organization.Site.Administrator.Contact.Email.Address",
"website",
#"Mission.Statement",
"Geocoding.Artifact.Address.Primary.X.Coordinate",
"Geocoding.Artifact.Address.Primary.Y.Coordinate",
#"health_services",
#"language_filter",
#"service_access",
#"Site.City",
"zipcode",
# "Migrant.Health.Centers.HRSA.Grant.Subprogram.Indicator",
# "Serving.Uninsured",
"Operating.Hours.per.Week"
)
health_clinics <- health_clinics[c(health_keep_cols)]
# Rename the columns
colnames(health_clinics) <- c("ID", "org", "address", "phone", "email", "website", #"mission",
"lon", "lat", #"services", "language_support", "service_access", #"city",
"zipcode","capacity_hours"
#"HRSA", "uninsured",
)
round(colSums(is.na(health_clinics))/nrow(health_clinics)*100,2)
#drop lon is NA
health_clinics <- health_clinics[!is.na(health_clinics$lon), ]
round(colSums(is.na(health_clinics))/nrow(health_clinics)*100,2)
#clinics_preload <- health_clinics
#clinics_preload$type <- "health"
#write out
runApp('~/Documents/GitHub/bimi_msi/COVID')
View(health_clinics_national_load)
runApp('~/Documents/GitHub/bimi_msi/COVID')
View(hospitals_national_load)
View(health_clinics_national_load)
load("/Users/chengren/Documents/GitHub/bimi_msi/COVID/process.Rdata")
load("/Users/chengren/Documents/GitHub/bimi_msi/CENSUS/process.Rdata")
View(clinics_preload)
